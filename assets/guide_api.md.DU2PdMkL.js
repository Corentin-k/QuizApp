import{_ as e,c as i,a2 as t,o as a}from"./chunks/framework.BNQxy7xR.js";const g=JSON.parse('{"title":"API Documentation","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/api.md","filePath":"guide/api.md"}'),n={name:"guide/api.md"};function r(o,s,l,h,p,d){return a(),i("div",null,s[0]||(s[0]=[t('<h1 id="api-documentation" tabindex="-1">API Documentation <a class="header-anchor" href="#api-documentation" aria-label="Permalink to &quot;API Documentation&quot;">​</a></h1><p>This documentation outlines the REST API and WebSocket functionality for the quiz application. The backend is built using <strong>Node.js</strong>, <strong>Express</strong>, and <strong>WebSocket</strong>, enabling real-time communication and user interaction.</p><h2 id="server-overview" tabindex="-1">Server Overview <a class="header-anchor" href="#server-overview" aria-label="Permalink to &quot;Server Overview&quot;">​</a></h2><p>The server is built with Express and includes a WebSocket server for broadcasting updates. It listens on the following ports:</p><ul><li><strong>HTTP Server</strong>: Port <code>8081</code> for REST API endpoints.</li><li><strong>WebSocket Server</strong>: Port <code>8082</code> for real-time communication.</li></ul><hr><h2 id="websocket-server" tabindex="-1">WebSocket Server <a class="header-anchor" href="#websocket-server" aria-label="Permalink to &quot;WebSocket Server&quot;">​</a></h2><p>The WebSocket server facilitates real-time updates for connected clients. It broadcasts changes such as user creation, deletion, or score updates.</p><h3 id="websocket-events" tabindex="-1">WebSocket Events <a class="header-anchor" href="#websocket-events" aria-label="Permalink to &quot;WebSocket Events&quot;">​</a></h3><ul><li><strong>user_created</strong>: Triggered when a new user is created.</li><li><strong>user_deleted</strong>: Triggered when a user is deleted.</li><li><strong>UPDATE_SCORE</strong>: Triggered when a user&#39;s score is updated.</li></ul><h4 id="example-websocket-handler" tabindex="-1">Example WebSocket Handler <a class="header-anchor" href="#example-websocket-handler" aria-label="Permalink to &quot;Example WebSocket Handler&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    connectedClients.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ws);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WebSocket message received:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;close&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connectedClients </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connectedClients.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ws);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h2 id="rest-api-routes" tabindex="-1">REST API Routes <a class="header-anchor" href="#rest-api-routes" aria-label="Permalink to &quot;REST API Routes&quot;">​</a></h2><p>Below is the list of REST API endpoints provided by the server.</p><h3 id="users" tabindex="-1"><strong>/users</strong> <a class="header-anchor" href="#users" aria-label="Permalink to &quot;**/users**&quot;">​</a></h3><h4 id="post-users" tabindex="-1">POST <code>/users</code> <a class="header-anchor" href="#post-users" aria-label="Permalink to &quot;POST `/users` {#post-users}&quot;">​</a></h4><p>Create a new user.</p><p><strong>Parameters:</strong></p><ul><li><code>username</code> (string, required): The user&#39;s username.</li><li><code>password</code> (string, required): The user&#39;s password.</li></ul><p><strong>Responses:</strong></p><ul><li><strong>201</strong>: User created successfully.</li><li><strong>400</strong>: Missing required parameters.</li><li><strong>409</strong>: User already exists.</li></ul><hr><h4 id="get-users" tabindex="-1">GET <code>/users</code> <a class="header-anchor" href="#get-users" aria-label="Permalink to &quot;GET `/users` {#get-users}&quot;">​</a></h4><p>Retrieve a list of all users (admin-only access).</p><p><strong>Query Parameters (optional):</strong></p><ul><li><code>page</code> (integer): The page number.</li><li><code>limit</code> (integer): The number of items per page.</li></ul><p><strong>Responses:</strong></p><ul><li><strong>200</strong>: List of users.</li></ul><hr><h4 id="get-users-id" tabindex="-1">GET <code>/users/{id}</code> <a class="header-anchor" href="#get-users-id" aria-label="Permalink to &quot;GET `/users/{id}` {#get-users-id}&quot;">​</a></h4><p>Retrieve details of a user by their ID.</p><p><strong>Responses:</strong></p><ul><li><strong>200</strong>: User details.</li><li><strong>404</strong>: User not found.</li></ul><hr><h4 id="delete-users-id" tabindex="-1">DELETE <code>/users/{id}</code> <a class="header-anchor" href="#delete-users-id" aria-label="Permalink to &quot;DELETE `/users/{id}` {#delete-users-id}&quot;">​</a></h4><p>Delete a user by their ID.</p><p><strong>Responses:</strong></p><ul><li><strong>204</strong>: User deleted successfully.</li><li><strong>403</strong>: Unauthorized access.</li></ul><hr><h4 id="post-users-login" tabindex="-1">POST <code>/users/login</code> <a class="header-anchor" href="#post-users-login" aria-label="Permalink to &quot;POST `/users/login` {#post-users-login}&quot;">​</a></h4><p>Authenticate the user and return a token.</p><p><strong>Parameters:</strong></p><ul><li><code>username</code> (string, required): The username.</li><li><code>password</code> (string, required): The password.</li></ul><p><strong>Responses:</strong></p><ul><li><strong>200</strong>: Login successful (returns a token).</li><li><strong>401</strong>: Invalid credentials.</li></ul><hr><h3 id="questions" tabindex="-1"><strong>/questions</strong> <a class="header-anchor" href="#questions" aria-label="Permalink to &quot;**/questions**&quot;">​</a></h3><h4 id="get-questions" tabindex="-1">GET <code>/questions</code> <a class="header-anchor" href="#get-questions" aria-label="Permalink to &quot;GET `/questions` {#get-questions}&quot;">​</a></h4><p>Retrieve all questions.</p><p><strong>Query Parameters (optional):</strong></p><ul><li><code>page</code> (integer): The page number.</li><li><code>limit</code> (integer): The number of questions to return.</li></ul><p><strong>Responses:</strong></p><ul><li><strong>200</strong>: List of questions.</li></ul><hr><h4 id="get-questions-id" tabindex="-1">GET <code>/questions/{id}</code> <a class="header-anchor" href="#get-questions-id" aria-label="Permalink to &quot;GET `/questions/{id}` {#get-questions-id}&quot;">​</a></h4><p>Retrieve a specific question by its ID.</p><p><strong>Responses:</strong></p><ul><li><strong>200</strong>: Question details.</li><li><strong>404</strong>: Question not found.</li></ul><hr><h4 id="get-questions-category" tabindex="-1">GET <code>/questions/category/{category}</code> <a class="header-anchor" href="#get-questions-category" aria-label="Permalink to &quot;GET `/questions/category/{category}` {#get-questions-category}&quot;">​</a></h4><p>Retrieve questions by category.</p><p><strong>Parameters:</strong></p><ul><li><code>category</code> (string, required): The category of the questions.</li></ul><p><strong>Responses:</strong></p><ul><li><strong>200</strong>: List of questions in the specified category.</li><li><strong>404</strong>: No questions found in the category.</li></ul><hr>',67)]))}const c=e(n,[["render",r]]);export{g as __pageData,c as default};
