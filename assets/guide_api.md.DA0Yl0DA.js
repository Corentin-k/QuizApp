import{_ as e,c as i,a2 as a,o as t}from"./chunks/framework.BNQxy7xR.js";const E=JSON.parse('{"title":"API Documentation","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/api.md","filePath":"guide/api.md"}'),n={name:"guide/api.md"};function r(l,s,h,o,p,d){return t(),i("div",null,s[0]||(s[0]=[a(`<h1 id="api-documentation" tabindex="-1">API Documentation <a class="header-anchor" href="#api-documentation" aria-label="Permalink to &quot;API Documentation&quot;">​</a></h1><p>This page demonstrates the usage of the backend API for managing users and interacting with the WebSocket server.</p><p>The API includes HTTP routes for creating, fetching, updating, and deleting users, along with a WebSocket server for real-time communication.</p><h2 id="server-overview" tabindex="-1">Server Overview <a class="header-anchor" href="#server-overview" aria-label="Permalink to &quot;Server Overview&quot;">​</a></h2><p>The server is built with Express and includes a WebSocket server for broadcasting updates. The server listens on two ports:</p><ul><li><strong>HTTP Server</strong> on port <code>8081</code> for REST API endpoints.</li><li><strong>WebSocket Server</strong> on port <code>8082</code> for real-time data broadcasting.</li></ul><h3 id="cors-configuration" tabindex="-1">CORS Configuration <a class="header-anchor" href="#cors-configuration" aria-label="Permalink to &quot;CORS Configuration&quot;">​</a></h3><p>CORS is configured to allow requests from specific origins (e.g., the front-end application running on <code>localhost:5175</code>):</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> allowedOrigins</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:5175&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://10.3.202.11:5175&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">origin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allowedOrigins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(origin)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Non autorisé par CORS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    methods: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;PUT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DELETE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    allowedHeaders: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Authorization&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}));</span></span></code></pre></div><h2 id="websocket-server" tabindex="-1">WebSocket Server <a class="header-anchor" href="#websocket-server" aria-label="Permalink to &quot;WebSocket Server&quot;">​</a></h2><p>The WebSocket server broadcasts real-time updates to connected clients. When users are created, deleted, or their scores are updated, the changes are broadcasted.</p><h3 id="websocket-events" tabindex="-1">WebSocket Events <a class="header-anchor" href="#websocket-events" aria-label="Permalink to &quot;WebSocket Events&quot;">​</a></h3><ul><li><strong>user_created</strong>: Sent when a new user is created.</li><li><strong>user_deleted</strong>: Sent when a user is deleted.</li><li><strong>UPDATE_SCORE</strong>: Sent when a user&#39;s score is incremented.</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    connectedClients.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ws);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WebSocket message received:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message); });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;close&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { connectedClients </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connectedClients.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ws); });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="routes-api-rest" tabindex="-1">Routes API REST <a class="header-anchor" href="#routes-api-rest" aria-label="Permalink to &quot;Routes API REST&quot;">​</a></h2><p>This documentation describes the different routes of the API used in the quiz system.</p><h2 id="users" tabindex="-1">/users <a class="header-anchor" href="#users" aria-label="Permalink to &quot;/users&quot;">​</a></h2><h3 id="post-users" tabindex="-1">POST /users <a class="header-anchor" href="#post-users" aria-label="Permalink to &quot;POST /users {#post-users}&quot;">​</a></h3><p>Create a new user.</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>username</code> (string): The username (required).</li><li><code>password</code> (string): The password (required).</li></ul><h4 id="responses" tabindex="-1">Responses <a class="header-anchor" href="#responses" aria-label="Permalink to &quot;Responses&quot;">​</a></h4><ul><li><strong>201</strong>: User created successfully.</li><li><strong>400</strong>: Missing values.</li><li><strong>409</strong>: User already exists.</li></ul><h3 id="get-users" tabindex="-1">GET /users <a class="header-anchor" href="#get-users" aria-label="Permalink to &quot;GET /users {#get-users}&quot;">​</a></h3><p>Retrieve all users (admin-only access).</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>page</code> (integer): The page number (optional).</li><li><code>limit</code> (integer): The number of items to return per page (optional).</li></ul><h4 id="response" tabindex="-1">Response <a class="header-anchor" href="#response" aria-label="Permalink to &quot;Response&quot;">​</a></h4><ul><li><strong>200</strong>: List of users.</li></ul><h3 id="get-users-id" tabindex="-1">GET /users/{id} <a class="header-anchor" href="#get-users-id" aria-label="Permalink to &quot;GET /users/{id} {#get-users-id}&quot;">​</a></h3><p>Retrieve user details by their ID.</p><h4 id="responses-1" tabindex="-1">Responses <a class="header-anchor" href="#responses-1" aria-label="Permalink to &quot;Responses&quot;">​</a></h4><ul><li><strong>200</strong>: User details.</li><li><strong>404</strong>: User not found.</li></ul><h3 id="delete-users-id" tabindex="-1">DELETE /users/{id} <a class="header-anchor" href="#delete-users-id" aria-label="Permalink to &quot;DELETE /users/{id} {#delete-users-id}&quot;">​</a></h3><p>Delete a user by their ID.</p><h4 id="responses-2" tabindex="-1">Responses <a class="header-anchor" href="#responses-2" aria-label="Permalink to &quot;Responses&quot;">​</a></h4><ul><li><strong>204</strong>: User deleted successfully.</li><li><strong>403</strong>: Unauthorized access.</li></ul><h3 id="post-users-login" tabindex="-1">POST /users/login <a class="header-anchor" href="#post-users-login" aria-label="Permalink to &quot;POST /users/login {#post-users-login}&quot;">​</a></h3><p>Authenticate the user and return a token.</p><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>username</code> (string): The username (required).</li><li><code>password</code> (string): The password (required).</li></ul><h4 id="responses-3" tabindex="-1">Responses <a class="header-anchor" href="#responses-3" aria-label="Permalink to &quot;Responses&quot;">​</a></h4><ul><li><strong>200</strong>: Login successful, returns a token.</li><li><strong>401</strong>: Invalid credentials.</li></ul><hr><h2 id="questions" tabindex="-1">/questions <a class="header-anchor" href="#questions" aria-label="Permalink to &quot;/questions&quot;">​</a></h2><h3 id="get-questions" tabindex="-1">GET /questions <a class="header-anchor" href="#get-questions" aria-label="Permalink to &quot;GET /questions {#get-questions}&quot;">​</a></h3><p>Retrieve all questions.</p><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>page</code> (integer): The page number (optional).</li><li><code>limit</code> (integer): The number of questions to return (optional).</li></ul><h3 id="get-questions-id" tabindex="-1">GET /questions/{id} <a class="header-anchor" href="#get-questions-id" aria-label="Permalink to &quot;GET /questions/{id} {#get-questions-id}&quot;">​</a></h3><p>Retrieve a question by its ID.</p><h4 id="response-1" tabindex="-1">Response <a class="header-anchor" href="#response-1" aria-label="Permalink to &quot;Response&quot;">​</a></h4><ul><li><strong>200</strong>: Question details.</li></ul><h3 id="get-questions-category" tabindex="-1">GET /questions/category/{category} <a class="header-anchor" href="#get-questions-category" aria-label="Permalink to &quot;GET /questions/category/{category} {#get-questions-category}&quot;">​</a></h3><p>Retrieve questions by category.</p><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>category</code> (string): The category of the question (required).</li></ul><h4 id="response-2" tabindex="-1">Response <a class="header-anchor" href="#response-2" aria-label="Permalink to &quot;Response&quot;">​</a></h4><ul><li><strong>200</strong>: List of questions matching the category.</li></ul><hr><h2 id="leaderboard" tabindex="-1">/leaderboard <a class="header-anchor" href="#leaderboard" aria-label="Permalink to &quot;/leaderboard&quot;">​</a></h2><h3 id="get-leaderboard" tabindex="-1">GET /leaderboard <a class="header-anchor" href="#get-leaderboard" aria-label="Permalink to &quot;GET /leaderboard {#get-leaderboard}&quot;">​</a></h3><p>Retrieve the leaderboard.</p><h4 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>limit</code> (integer): The number of items to return (optional).</li><li><code>category</code> (string): The category of questions to filter the leaderboard (optional).</li></ul><h4 id="response-3" tabindex="-1">Response <a class="header-anchor" href="#response-3" aria-label="Permalink to &quot;Response&quot;">​</a></h4><ul><li><strong>200</strong>: Leaderboard details.</li></ul>`,67)]))}const u=e(n,[["render",r]]);export{E as __pageData,u as default};
