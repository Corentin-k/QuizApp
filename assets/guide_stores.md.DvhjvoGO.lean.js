import{_ as t,c as o,a2 as s,o as a}from"./chunks/framework.BNQxy7xR.js";const g=JSON.parse('{"title":"Pinia Stores Guide","description":"","frontmatter":{},"headers":[],"relativePath":"guide/stores.md","filePath":"guide/stores.md"}'),i={name:"guide/stores.md"};function r(n,e,l,c,d,u){return a(),o("div",null,e[0]||(e[0]=[s('<h1 id="pinia-stores-guide" tabindex="-1">Pinia Stores Guide <a class="header-anchor" href="#pinia-stores-guide" aria-label="Permalink to &quot;Pinia Stores Guide&quot;">​</a></h1><h2 id="question-store" tabindex="-1">Question Store <a class="header-anchor" href="#question-store" aria-label="Permalink to &quot;Question Store&quot;">​</a></h2><p>The <strong>Question Store</strong> (<code>questionStore</code>) manages the quiz flow, questions, WebSocket communication, and user interactions.</p><h3 id="state-properties" tabindex="-1">State Properties <a class="header-anchor" href="#state-properties" aria-label="Permalink to &quot;State Properties&quot;">​</a></h3><ul><li><code>ws</code>: Instance of the WebSocket connection.</li><li><code>currentQuestion</code>: The current question being displayed.</li><li><code>questions</code>: List of all quiz questions.</li><li><code>canAnswer</code>: Boolean indicating whether the user can answer the current question.</li><li><code>isAdmin</code>: Boolean to determine if the user has admin privileges.</li><li><code>sessionActive</code>: Indicates whether the quiz session is active.</li><li><code>isCorrectAnswer</code>: Indicates whether the last answer submitted was correct.</li><li><code>songPlayer</code>: Instance of Howler.js to handle audio playback for song-based questions.</li><li><code>isPlaying</code>: Boolean to indicate whether a song is currently playing.</li></ul><h3 id="actions" tabindex="-1">Actions <a class="header-anchor" href="#actions" aria-label="Permalink to &quot;Actions&quot;">​</a></h3><h4 id="websocket-management" tabindex="-1">WebSocket Management <a class="header-anchor" href="#websocket-management" aria-label="Permalink to &quot;WebSocket Management&quot;">​</a></h4><ul><li><strong><code>initWebSocket()</code></strong>: Initializes the WebSocket connection and handles incoming messages (<code>question</code>, <code>answered</code>, <code>start</code>, <code>stopQuiz</code>, etc.).</li><li><strong><code>submitAnswer(answer, userId)</code></strong>: Sends the user&#39;s answer to the server via WebSocket.</li><li><strong><code>stopQuiz()</code></strong>: Ends the quiz session (admin-only action).</li></ul><h4 id="quiz-flow" tabindex="-1">Quiz Flow <a class="header-anchor" href="#quiz-flow" aria-label="Permalink to &quot;Quiz Flow&quot;">​</a></h4><ul><li><strong><code>startQuiz()</code></strong>: Starts the quiz by sending the first question (admin-only action).</li><li><strong><code>fetchNextQuestion()</code></strong>: Moves to the next question in the quiz (admin-only action).</li><li><strong><code>stopAnswering()</code></strong>: Prevents users from answering the current question (admin-only action).</li><li><strong><code>updateQuestion(question)</code></strong>: Updates the current question displayed to users.</li></ul><h4 id="audio-management" tabindex="-1">Audio Management <a class="header-anchor" href="#audio-management" aria-label="Permalink to &quot;Audio Management&quot;">​</a></h4><ul><li><strong><code>initSongPlayer(songUrl)</code></strong>: Initializes the audio player for song-based questions.</li><li><strong><code>playSong()</code></strong>, <strong><code>pauseSong()</code></strong>, <strong><code>stopSong()</code></strong>: Controls playback of the song.</li></ul><h4 id="utility" tabindex="-1">Utility <a class="header-anchor" href="#utility" aria-label="Permalink to &quot;Utility&quot;">​</a></h4><ul><li><strong><code>fetchQuestions()</code></strong>: Retrieves the list of quiz questions from the server.</li><li><strong><code>toggleAnswering(status)</code></strong>: Allows or restricts answering based on the status.</li><li><strong><code>setAdminStatus(status)</code></strong>: Sets the admin status of the current user.</li></ul><hr><h2 id="user-store" tabindex="-1">User Store <a class="header-anchor" href="#user-store" aria-label="Permalink to &quot;User Store&quot;">​</a></h2><p>The <strong>User Store</strong> (<code>userStore</code>) handles user management, user responses, and WebSocket communication related to users.</p><h3 id="state-properties-1" tabindex="-1">State Properties <a class="header-anchor" href="#state-properties-1" aria-label="Permalink to &quot;State Properties&quot;">​</a></h3><ul><li><code>users</code>: List of all registered users.</li><li><code>socket</code>: Instance of the WebSocket connection for user-related messages.</li><li><code>userResponses</code>: Tracks which users have answered the current question.</li></ul><h3 id="actions-1" tabindex="-1">Actions <a class="header-anchor" href="#actions-1" aria-label="Permalink to &quot;Actions&quot;">​</a></h3><h4 id="websocket-management-1" tabindex="-1">WebSocket Management <a class="header-anchor" href="#websocket-management-1" aria-label="Permalink to &quot;WebSocket Management&quot;">​</a></h4><ul><li><strong><code>connectWebSocket()</code></strong>: Establishes a WebSocket connection and listens for user-related events (<code>NEW_USER</code>, <code>UPDATE_SCORE</code>, <code>DELETE_USER</code>, <code>userAnswer</code>).</li><li><strong><code>allUsersAnswered(totalUsers)</code></strong>: Checks if all users have submitted their answers.</li></ul><h4 id="user-management" tabindex="-1">User Management <a class="header-anchor" href="#user-management" aria-label="Permalink to &quot;User Management&quot;">​</a></h4><ul><li><strong><code>fetchUsers()</code></strong>: Retrieves the list of users from the server.</li><li><strong><code>deleteUser(userId)</code></strong>: Deletes a user from the server and updates the local user list.</li><li><strong><code>createUser(userName, password)</code></strong>: Creates a new user and stores it locally.</li><li><strong><code>loginUser(userName, password)</code></strong>: Logs in an existing user and saves their details locally.</li></ul><h4 id="utility-1" tabindex="-1">Utility <a class="header-anchor" href="#utility-1" aria-label="Permalink to &quot;Utility&quot;">​</a></h4><ul><li><strong><code>saveUserDom(user)</code></strong>: Saves the current user&#39;s details in localStorage for persistence.</li></ul><hr><h2 id="interaction-between-stores" tabindex="-1">Interaction Between Stores <a class="header-anchor" href="#interaction-between-stores" aria-label="Permalink to &quot;Interaction Between Stores&quot;">​</a></h2><ol><li><p><strong>Question Store</strong>:</p><ul><li>Manages the quiz flow and sends quiz-related commands to the server (e.g., starting/stopping the quiz, updating questions).</li><li>Receives real-time updates about quiz progress from the WebSocket server.</li></ul></li><li><p><strong>User Store</strong>:</p><ul><li>Tracks the list of users and their responses.</li><li>Updates user scores and manages user-related WebSocket events.</li></ul></li></ol><hr><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li><strong>Real-Time Communication</strong>: Both stores use WebSocket connections for real-time updates between the client and server.</li><li><strong>Admin and User Roles</strong>: The <code>isAdmin</code> property in the Question Store ensures that certain actions are restricted to administrators.</li><li><strong>Extensibility</strong>: The modular nature of these stores allows easy addition of new features, such as additional question types or user roles.</li></ul><hr><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h3><ul><li>The <code>Howler.js</code> integration in the Question Store adds an engaging audio feature for quiz questions involving music.</li><li>The <code>userResponses</code> in the User Store simplifies the tracking of user activity during the quiz.</li></ul><p>This structure ensures the separation of concerns, making the application easy to maintain and scale.</p>',36)]))}const m=t(i,[["render",r]]);export{g as __pageData,m as default};
